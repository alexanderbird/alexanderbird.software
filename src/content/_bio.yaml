title: Bio
subtitle: Strengths, values, and motivators
casualDisclaimer: |
  <p>
    Hey, if you're here for content, head over to <a href="/blog">/blog</a>.
  </p>
  <p>
    Or, carry on for my slightly out of date resume 👇🏻.
  </p>


tiles:
  - motivation:
      title: Growing In
      details: >
        I'd like to be on a team where these practices and philosophies are establish. I would
        like to work with some folks who have experience in these areas who will challenge me
        to grow in them.
    strengths:
      - title: Inspect and Adapt
        body: >
          the best team processes come from regularly taking time as a team
          to look back on how we've been working and come up with ideas for how we can work
          more effectively.
      - title: Lean Flow
        body: >
          improve effectiveness, speed, quality, and agility by reducing the amount
          of work in progress. In software, work in progress includes unreleased features,
          unimplemented designs, unbuilt product backlogs, feature branches, and research for
          unbuilt features.
      - title: Cohesive Teams
        body: >
          the apparent speed-up created by having folks work independently is
          generally outweighed by the communication overhead of independent work stream. Since
          the thinking and learning we do *is* the work, we should set up our teams to think
          and learn together (instead of doing our &ldquo;work&rdquo; in isolation and having set times
          to synchronize).
      - title: Embrace the Chaos
        body: >
          it's not possible to design, estimate, or test our way to a 
          zero-surprise system. Instead of attempting to eliminate the unexpected, embrace it.
          Design with an intent to learn; estimate with the expectation that scope changes;
          supplement traditional testing with product metrics that detect unexpected failure.
      - title: Customer-Involved Development
        body: >
          when we design, we incorporate feedback from real, 
          specific customers. When we deliver, we let customers use it (instead of demoing it
          to customers)
  - motivation:
      title: Can Teach
      details: >
        I'd like to be on a team where these things are accepted as reasonable
        (even if the team isn't currently practicing them).  I have experience teaching these
        things and am comfortable being the advocate for them on a team.
    strengths:
      - title: Example Driven Development (TDD, ATDD, and BDD)
        body: >
          usually, the highest value code
          comes from authoring a single example of how it is used (in the form of an automated
          test) before authoring the code.
      - title: Domain Driven Design
        body: >
          for business-critical code, we can produce the highest
          quality (and most adaptable) code by developing a spoken language to discuss the
          system that all team members share, and we should structure our code to align
          with that spoken language. 
      - title: Refactoring
        body: >
          since we can't (and shouldn't try to) predict the future, the code we wrote
          last year/month/week is not perfectly suited for the new things we're building. 
          Rather than forcing new behaviour into a system which it doesn't fit, we ought to
          continuously update the structure of our code without changing the behavior so that
          it is easier to add new capabilities. &ldquo;Make the change easy (this might be hard) then 
          make the easy change&rdquo;.
      - title: Story Slicing by Customer Capability
        body: >
          instead of dividing our work by technical chunks,
          we identify small, customer-valuable slices of capabilities and deliver one of them (end
          to end) before working on the next slice of customer value. For exploratory work when
          the smallest possible slice takes &ldquo;a while&rdquo;, then we slice on technical boundaries.
      - title: Story Counting Instead of Numeric Estimates
        body: >
          when we discuss what's entailed in building
          the next slice, instead of driving to a number for the story, drive towards same-sized stories.
          If we learn there are many aspects to the story, slice it into many stories. If we learn
          that there are many risks with the story, slice off a time-boxed experiment instead of
          taking on the whole story. When you need to forecast, count the remaining stories and compare
          it to the number of stories delivered per unit time in the recent past. 
